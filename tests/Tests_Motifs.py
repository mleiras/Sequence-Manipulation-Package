# -*- coding: utf-8 -*-

import unittest
from Motifs import Motifs

class TestMotifs (unittest.TestCase):        

     def setUp(self):
          self.t1 = Motifs(['ATTG', 'ATCG','ATTC','ACTC'], pseudo = 0.5)
          self.t2 = Motifs (['ATTG', 'ATCG','ATTC','ACTC'], pseudo = 0.5, profile = 'pssm')
          self.t3 = Motifs (['AUUG', 'AUCG','AUUC','ACUC'],pseudo = 0.5)
          self.t4 = Motifs (['AUUG', 'AUCG','AUUC','ACUC'],pseudo = 0.5, profile = 'pssm' )
          self.t5 = Motifs (['FLIMVSPTAY_HQ', 'NKDECWRG','NKDEGAGAG','FMVSPFA'], pseudo = 0.5)
          self.t6 = Motifs (['FLIMVSPTAY_HQ', 'NKDECWRG','NKDEGAGAG','FMVSPFA'], pseudo = 0.5, profile = 'pssm')
          self.t7 = self.t1.create_profile()
          self.t8 = self.t2.create_profile()
          self.t9 = self.t3.create_profile()
          self.t10 = self.t4.create_profile()
          self.t11 = self.t5.create_profile()
          self.t12 = self.t6.create_profile()
          
        
     def test_create_profile(self):
          self.assertEqual(self.t1.create_profile(), ([{'A': 0.75, 'C': 0.08333333333333333, 'T': 0.08333333333333333, 'G': 0.08333333333333333}, {'A': 0.08333333333333333, 'C': 0.25, 'T': 0.5833333333333334, 'G': 0.08333333333333333}, {'A': 0.08333333333333333, 'C': 0.25, 'T': 0.5833333333333334, 'G': 0.08333333333333333}, {'A': 0.08333333333333333, 'C': 0.4166666666666667, 'T': 0.08333333333333333, 'G': 0.4166666666666667}]))
          self.assertEqual(self.t7, [{'A': 0.75, 'C': 0.08333333333333333, 'T': 0.08333333333333333, 'G': 0.08333333333333333}, {'A': 0.08333333333333333, 'C': 0.25, 'T': 0.5833333333333334, 'G': 0.08333333333333333}, {'A': 0.08333333333333333, 'C': 0.25, 'T': 0.5833333333333334, 'G': 0.08333333333333333}, {'A': 0.08333333333333333, 'C': 0.4166666666666667, 'T': 0.08333333333333333, 'G': 0.4166666666666667}])
          self.assertEqual(self.t2.create_profile(), ([{'A': 1.584962500721156, 'C': -1.5849625007211563, 'T': -1.5849625007211563, 'G': -1.5849625007211563}, {'A': -1.5849625007211563, 'C': 0.0, 'T': 1.222392421336448, 'G': -1.5849625007211563}, {'A': -1.5849625007211563, 'C': 0.0, 'T': 1.222392421336448, 'G': -1.5849625007211563}, {'A': -1.5849625007211563, 'C': 0.7369655941662062, 'T': -1.5849625007211563, 'G': 0.7369655941662062}]))
          self.assertEqual(self.t3.create_profile(), ([{'A': 0.75, 'C': 0.08333333333333333, 'G': 0.08333333333333333, 'U': 0.08333333333333333}, {'A': 0.08333333333333333, 'C': 0.25, 'G': 0.08333333333333333, 'U': 0.5833333333333334}, {'A': 0.08333333333333333, 'C': 0.25, 'G': 0.08333333333333333, 'U': 0.5833333333333334}, {'A': 0.08333333333333333, 'C': 0.4166666666666667, 'G': 0.4166666666666667, 'U': 0.08333333333333333}]))
          self.assertEqual(self.t4.create_profile(), ([{'A': 1.584962500721156, 'C': -1.5849625007211563, 'G': -1.5849625007211563, 'U': -1.5849625007211563}, {'A': -1.5849625007211563, 'C': 0.0, 'G': -1.5849625007211563, 'U': 1.222392421336448}, {'A': -1.5849625007211563, 'C': 0.0, 'G': -1.5849625007211563, 'U': 1.222392421336448}, {'A': -1.5849625007211563, 'C': 0.7369655941662062, 'G': 0.7369655941662062, 'U': -1.5849625007211563}]))
          self.assertEqual(self.t5.create_profile(), ([{'F': 0.17857142857142858, 'L': 0.03571428571428571, 'I': 0.03571428571428571, 'M': 0.03571428571428571, 'V': 0.03571428571428571, 'S': 0.03571428571428571, 'P': 0.03571428571428571, 'T': 0.03571428571428571, 'A': 0.03571428571428571, 'Y': 0.03571428571428571, 'H': 0.03571428571428571, 'Q': 0.03571428571428571, 'N': 0.17857142857142858, 'K': 0.03571428571428571, 'D': 0.03571428571428571, 'E': 0.03571428571428571, 'C': 0.03571428571428571, 'W': 0.03571428571428571, 'R': 0.03571428571428571, 'G': 0.03571428571428571, '_': 0.03571428571428571}, {'F': 0.03571428571428571, 'L': 0.10714285714285714, 'I': 0.03571428571428571, 'M': 0.10714285714285714, 'V': 0.03571428571428571, 'S': 0.03571428571428571, 'P': 0.03571428571428571, 'T': 0.03571428571428571, 'A': 0.03571428571428571, 'Y': 0.03571428571428571, 'H': 0.03571428571428571, 'Q': 0.03571428571428571, 'N': 0.03571428571428571, 'K': 0.17857142857142858, 'D': 0.03571428571428571, 'E': 0.03571428571428571, 'C': 0.03571428571428571, 'W': 0.03571428571428571, 'R': 0.03571428571428571, 'G': 0.03571428571428571, '_': 0.03571428571428571}, {'F': 0.03571428571428571, 'L': 0.03571428571428571, 'I': 0.10714285714285714, 'M': 0.03571428571428571, 'V': 0.10714285714285714, 'S': 0.03571428571428571, 'P': 0.03571428571428571, 'T': 0.03571428571428571, 'A': 0.03571428571428571, 'Y': 0.03571428571428571, 'H': 0.03571428571428571, 'Q': 0.03571428571428571, 'N': 0.03571428571428571, 'K': 0.03571428571428571, 'D': 0.17857142857142858, 'E': 0.03571428571428571, 'C': 0.03571428571428571, 'W': 0.03571428571428571, 'R': 0.03571428571428571, 'G': 0.03571428571428571, '_': 0.03571428571428571}, {'F': 0.03571428571428571, 'L': 0.03571428571428571, 'I': 0.03571428571428571, 'M': 0.10714285714285714, 'V': 0.03571428571428571, 'S': 0.10714285714285714, 'P': 0.03571428571428571, 'T': 0.03571428571428571, 'A': 0.03571428571428571, 'Y': 0.03571428571428571, 'H': 0.03571428571428571, 'Q': 0.03571428571428571, 'N': 0.03571428571428571, 'K': 0.03571428571428571, 'D': 0.03571428571428571, 'E': 0.17857142857142858, 'C': 0.03571428571428571, 'W': 0.03571428571428571, 'R': 0.03571428571428571, 'G': 0.03571428571428571, '_': 0.03571428571428571}, {'F': 0.03571428571428571, 'L': 0.03571428571428571, 'I': 0.03571428571428571, 'M': 0.03571428571428571, 'V': 0.10714285714285714, 'S': 0.03571428571428571, 'P': 0.10714285714285714, 'T': 0.03571428571428571, 'A': 0.03571428571428571, 'Y': 0.03571428571428571, 'H': 0.03571428571428571, 'Q': 0.03571428571428571, 'N': 0.03571428571428571, 'K': 0.03571428571428571, 'D': 0.03571428571428571, 'E': 0.03571428571428571, 'C': 0.10714285714285714, 'W': 0.03571428571428571, 'R': 0.03571428571428571, 'G': 0.10714285714285714, '_': 0.03571428571428571}, {'F': 0.10714285714285714, 'L': 0.03571428571428571, 'I': 0.03571428571428571, 'M': 0.03571428571428571, 'V': 0.03571428571428571, 'S': 0.10714285714285714, 'P': 0.03571428571428571, 'T': 0.03571428571428571, 'A': 0.10714285714285714, 'Y': 0.03571428571428571, 'H': 0.03571428571428571, 'Q': 0.03571428571428571, 'N': 0.03571428571428571, 'K': 0.03571428571428571, 'D': 0.03571428571428571, 'E': 0.03571428571428571, 'C': 0.03571428571428571, 'W': 0.10714285714285714, 'R': 0.03571428571428571, 'G': 0.03571428571428571, '_': 0.03571428571428571}, {'F': 0.03571428571428571, 'L': 0.03571428571428571, 'I': 0.03571428571428571, 'M': 0.03571428571428571, 'V': 0.03571428571428571, 'S': 0.03571428571428571, 'P': 0.10714285714285714, 'T': 0.03571428571428571, 'A': 0.10714285714285714, 'Y': 0.03571428571428571, 'H': 0.03571428571428571, 'Q': 0.03571428571428571, 'N': 0.03571428571428571, 'K': 0.03571428571428571, 'D': 0.03571428571428571, 'E': 0.03571428571428571, 'C': 0.03571428571428571, 'W': 0.03571428571428571, 'R': 0.10714285714285714, 'G': 0.10714285714285714, '_': 0.03571428571428571}]))
          self.assertEqual(self.t6.create_profile(), ([{'F': 1.8365012677171204, 'L': -0.48542682717024194, 'I': -0.48542682717024194, 'M': -0.48542682717024194, 'V': -0.48542682717024194, 'S': -0.48542682717024194, 'P': -0.48542682717024194, 'T': -0.48542682717024194, 'A': -0.48542682717024194, 'Y': -0.48542682717024194, 'H': -0.48542682717024194, 'Q': -0.48542682717024194, 'N': 1.8365012677171204, 'K': -0.48542682717024194, 'D': -0.48542682717024194, 'E': -0.48542682717024194, 'C': -0.48542682717024194, 'W': -0.48542682717024194, 'R': -0.48542682717024194, 'G': -0.48542682717024194, '_': -0.48542682717024194}, {'F': -0.48542682717024194, 'L': 1.0995356735509143, 'I': -0.48542682717024194, 'M': 1.0995356735509143, 'V': -0.48542682717024194, 'S': -0.48542682717024194, 'P': -0.48542682717024194, 'T': -0.48542682717024194, 'A': -0.48542682717024194, 'Y': -0.48542682717024194, 'H': -0.48542682717024194, 'Q': -0.48542682717024194, 'N': -0.48542682717024194, 'K': 1.8365012677171204, 'D': -0.48542682717024194, 'E': -0.48542682717024194, 'C': -0.48542682717024194, 'W': -0.48542682717024194, 'R': -0.48542682717024194, 'G': -0.48542682717024194, '_': -0.48542682717024194}, {'F': -0.48542682717024194, 'L': -0.48542682717024194, 'I': 1.0995356735509143, 'M': -0.48542682717024194, 'V': 1.0995356735509143, 'S': -0.48542682717024194, 'P': -0.48542682717024194, 'T': -0.48542682717024194, 'A': -0.48542682717024194, 'Y': -0.48542682717024194, 'H': -0.48542682717024194, 'Q': -0.48542682717024194, 'N': -0.48542682717024194, 'K': -0.48542682717024194, 'D': 1.8365012677171204, 'E': -0.48542682717024194, 'C': -0.48542682717024194, 'W': -0.48542682717024194, 'R': -0.48542682717024194, 'G': -0.48542682717024194, '_': -0.48542682717024194}, {'F': -0.48542682717024194, 'L': -0.48542682717024194, 'I': -0.48542682717024194, 'M': 1.0995356735509143, 'V': -0.48542682717024194, 'S': 1.0995356735509143, 'P': -0.48542682717024194, 'T': -0.48542682717024194, 'A': -0.48542682717024194, 'Y': -0.48542682717024194, 'H': -0.48542682717024194, 'Q': -0.48542682717024194, 'N': -0.48542682717024194, 'K': -0.48542682717024194, 'D': -0.48542682717024194, 'E': 1.8365012677171204, 'C': -0.48542682717024194, 'W': -0.48542682717024194, 'R': -0.48542682717024194, 'G': -0.48542682717024194, '_': -0.48542682717024194}, {'F': -0.48542682717024194, 'L': -0.48542682717024194, 'I': -0.48542682717024194, 'M': -0.48542682717024194, 'V': 1.0995356735509143, 'S': -0.48542682717024194, 'P': 1.0995356735509143, 'T': -0.48542682717024194, 'A': -0.48542682717024194, 'Y': -0.48542682717024194, 'H': -0.48542682717024194, 'Q': -0.48542682717024194, 'N': -0.48542682717024194, 'K': -0.48542682717024194, 'D': -0.48542682717024194, 'E': -0.48542682717024194, 'C': 1.0995356735509143, 'W': -0.48542682717024194, 'R': -0.48542682717024194, 'G': 1.0995356735509143, '_': -0.48542682717024194}, {'F': 1.0995356735509143, 'L': -0.48542682717024194, 'I': -0.48542682717024194, 'M': -0.48542682717024194, 'V': -0.48542682717024194, 'S': 1.0995356735509143, 'P': -0.48542682717024194, 'T': -0.48542682717024194, 'A': 1.0995356735509143, 'Y': -0.48542682717024194, 'H': -0.48542682717024194, 'Q': -0.48542682717024194, 'N': -0.48542682717024194, 'K': -0.48542682717024194, 'D': -0.48542682717024194, 'E': -0.48542682717024194, 'C': -0.48542682717024194, 'W': 1.0995356735509143, 'R': -0.48542682717024194, 'G': -0.48542682717024194, '_': -0.48542682717024194}, {'F': -0.48542682717024194, 'L': -0.48542682717024194, 'I': -0.48542682717024194, 'M': -0.48542682717024194, 'V': -0.48542682717024194, 'S': -0.48542682717024194, 'P': 1.0995356735509143, 'T': -0.48542682717024194, 'A': 1.0995356735509143, 'Y': -0.48542682717024194, 'H': -0.48542682717024194, 'Q': -0.48542682717024194, 'N': -0.48542682717024194, 'K': -0.48542682717024194, 'D': -0.48542682717024194, 'E': -0.48542682717024194, 'C': -0.48542682717024194, 'W': -0.48542682717024194, 'R': 1.0995356735509143, 'G': 1.0995356735509143, '_': -0.48542682717024194}]))


     def test_prob_seq(self):
          self.assertEqual(self.t1.prob_seq('CCTA', self.t7), (0.00101))
          self.assertEqual(self.t2.prob_seq('CCTA', self.t8), (-1.94753))
          self.assertEqual(self.t3.prob_seq('CCUA', self.t9), (0.00101))
          self.assertEqual(self.t4.prob_seq('CCUA', self.t10), (-1.94753))
          self.assertEqual(self.t5.prob_seq('FLIGMVG', self.t11), (0.0))
          self.assertEqual(self.t6.prob_seq('FLIGMVG', self.t12), (3.67883))


     def test_seq_most_probable(self):
          self.assertEqual(self.t1.seq_most_probable('TTTACGTTGTA', self.t7), ('GTTG'))
          self.assertEqual(self.t2.seq_most_probable('TTTACGTTGTA', self.t8), ('GTTG'))
          self.assertEqual(self.t3.seq_most_probable('UUUACGUUGUA', self.t9), ('GUUG'))   
          self.assertEqual(self.t4.seq_most_probable('UUUACGUUGUA', self.t10), ('GUUG'))  
          self.assertEqual(self.t5.seq_most_probable('FLK_IGVKAMVK', self.t11), ('FLK_IGV'))  
          self.assertEqual(self.t6.seq_most_probable('FLK_IGVKAMVK', self.t12), ('K_IGVKA'))  
         

if __name__ == '__main__':
    # begin the unittest.main()
    unittest.main(argv=['first-arg-is-ignored'], exit = False)
    